As a 20 year old web developer, there was only one place I wanted to work at. It was a Russian social media company. Everybody in Russia used their product. That product was very polished. And the team was considered cool. Almost elite.
Their executives often posted about how well-paid their engineers are. The small team of engineers seemed happy with the technical challenges and how the company treated them. In the Russian tech circles, many knew their names.
My mentor introduced me to their CTO, and I got a takehome exercise in JavaScript. It involved building a clone of their typeahead where you could select friends to message. I spent two weeks building it. It was pixel perfect in all browsers. I took care to replicate a similar caching and debouncing behavior.
The onsite interview was a disaster. Clearly, I didn’t have the experience at their scale. However, they said they’re willing to give me a try if I “understand their product”. They gave me a take-home exercise of designing a logged out state for that social media website. They wanted it to show a picture of a feature phone — many people didn’t know the mobile website works on cheap phones.
I spent a week designing that page. I did a lot of tiny details and even hid some Easter eggs in it. I was proud of myself. However, I couldn’t find any decent designs of a feature phone that wouldn’t look ugly. Instead, I put a beautiful iPhone design there. So aesthetically pleasing, I thought.
Of course, I got rejected. I ignored literally the only hard requirement — why was I so dense? I cried for a few hours because I didn’t really want to work anywhere else. I was still living with my Mom and was making no money.
At the time, I was seriously doubting my skills. Many things seemed “magic” to me. I started having doubts about whether dropping out was a good idea, after all. I signed up for an iOS development course on iTunes U. I also signed up for two courses on Coursera: Compilers and Machine Learning. Maybe they would make me a “real programmer”.
It was lonely to go through these courses on my own. I organized a tiny meetup with a few people from our web development “bootcamp”. We would gather and watch different online courses together at my mentor’s coworking space.
A month into it, I got an email. Someone was looking to hire a developer, and he heard about me from a person who went to my meetup. I was sick with mono and ignored the email, but this guy kept emailing me. He wanted to skype.
Roman Mazurenko was not a typical startup founder. Roman was interested in DIY publishing. Together with a couple of friends, for a few years, he somehow made Moscow cool. He organized parties and posed for fashion magazines. I didn’t know what to expect. But Roman was very down-to-earth and fun to talk to. His dream was to build a DIY publishing platform like in this concept video. I would have to move to Moscow and learn iOS development on the go. (By the way, the video guy is not Roman but a friend, and the app in the video is a fake animation made with Flash. Roman was great at crafting smoke and mirrors.)
I said yes.
I didn’t finish my Compilers and Machine Learning courses. I learned enough to know these topics aren’t magic. After that, I lost most of my interest in them.
2013
By 2013, my salary was $30k/year — almost twice what I made at my previous job. While low by US standards, it was pretty decent in Russia. I also negotiated some stock at Stampsy (spoiler alert: it ended up completely worthless).
Our team had five developers and two designers. We started by developing an iPad app, but neither of us had any real knowledge of iOS. I remember my relief when a teammate figured out how to implement the animation we needed for the first time. Until then, I thought we were doomed.
For a few months, I literally lived in our office. Looking back at this period, I’m not proud of my life-work balance, and it was not healthy. However, I learned more during these months than in two years before, and I don’t regret them.
Eventually, I moved out of the office. I’ve started to live in the same flat as Roman. My room cost me $1k/month. It was a spacious flat in the only area of Moscow that I enjoyed, and it was only five minutes of walk from the office.
We thought that some of the code we wrote might be useful to others. So we started publishing those pieces on GitHub. We didn’t expect anything grand, and even getting a couple of contributions was really nice. The most popular project I worked on during that period has 30 stars. To us, that was a lot.
A designer on our team introduced me to Bret Victor’s talks — particularly, to Inventing on Principle. I thought it was a very good talk. A very good one.
In April, we released the iPad app we’ve been working on. Apple reached out to our team and asked for assets to feature it in the App Store. We were over the moon. It stayed featured for weeks, and people started using it.
Our excitement quickly wore down as we realized there was no product market fit. The app was designed to create beautiful magazine-like layouts, but nobody had any beautiful content on an iPad. Also, the iPad camera had a horrible quality. The product didn’t make any sense. How could we not realize this?
My personal relationship was falling apart too. We weren’t a good fit, and mostly clung to each other out of fear of being alone. We finally broke up.
For a few months, I didn’t talk to people from our shared mutual circle and focused on work. But I realized that I missed one particular friend. I wrote to her, and she said she missed me too. I arranged a plan for a trip together.
I caught a cold. As the day of our would-be trip got closer, I felt worse, but I was hoping that maybe I’d be okay. When my train from Moscow to St. Petersburg had arrived, I clearly had a temperature. She said to come to her place anyway. She made me some hot tea, gave me warm socks, and we kissed. I moved in.
2014
For me, 2014 was the year of React.
After a brief existential crisis, we abandoned the iPad app and decided to pivot to a webapp. That meant I had to learn JavaScript, this time for reals. We built a decent prototype with Backbone, but interactive parts were a pain to code.
My colleague saw React but initially dismissed it. But a few months later, he told me React wasn’t actually that bad. I decided to give React a try. Ironically, the first component I converted from Backbone to React was a Like button.
And it worked well. Really well. It felt unlike anything I’ve seen.
React wasn’t a hard sell for the team. Over the next year we gradually converted all of our UI to React while shipping new features. React and the principle of unidirectional data flow allowed us to develop faster and with fewer bugs.
We started a private beta, and some photographers enjoyed creating visual stories with it. It was something between Medium, Pinterest, and Tumblr. There wasn’t a lot of traction, but it wasn’t a complete failure like the iPad app.
The only problem with using React was that there was virtually no ecosystem. When we just started, there was only one router (which was not React Router), and we couldn’t figure out how to use it. So we made our own. After React Router came out, we adopted it and added a feature we needed for our product.
There was no drag and drop solution for our use cases, so I ported my colleague’s library to React. I made a helper to manage document titles. Wrote another library to normalize API responses. Jing Chen from the React IRC channel suggested the core idea, and it worked! Little did I know that in a few years, Twitter would build their new website with this library and maintain it.
I wanted to contribute to React itself, too. I reached out to Paul O’Shannessy and asked if there were any pull requests I could work on. I finished my first task in a few days, but it didn’t get merged until a few months later. Big project release cycles, and all that. I was frustrated by the slowness in response so I put effort into the ecosystem instead. In retrospect, that was a lot more impactful.
In 2014, I did some of my first public speaking. I gave sort of a lecture about React at our office. It ended up going for two hours, and I’m still surprised that most of the people who showed up were polite enough to stay to the end.
Later, I signed up to give a talk at the BerlinJS meetup. My topic was “React and Flux”. I didn’t practice my talk, and I only went through the first half when my time ran out. People rolled their eyes, and I finally learned my lesson. From that point on, I would rehearse every talk from three up to fifteen times.
In 2014, I got my first email from a Facebook recruiter. I missed it in my inbox and only found it many months later. We still chatted eventually, but it turned out that hiring me in USA wouldn’t be easy because I didn’t have enough years of experience and I dropped out of college. Oops.
There was one project I started in 2014 that was particularly dear to me. Like most important things in my life, it happened randomly. I was converting our app from require.js to webpack to enable code splitting. I read about a bizarre webpack feature called “hot module replacement” that allowed you to edit CSS without reloading the page. But in webpack, it could work for JavaScript too.
I was really confused by this feature so I asked about it on StackOverflow. Webpack was still very new, and its creator noticed my question and left a response. It gave me enough information to see I could tie this feature with React, in the spirit of the first demo from Bret Victor’s talk I mentioned earlier.
I wrote an extremely hacky proof of concept by editing React source code and adding a bunch of global variables. I decided I won’t go to sleep until it works, and by 7am I had a demo I could tweet. Nobody cared about my Twitter before that, but this received some likes and retweets, and those 20 retweets were hugely validating. I knew then I’m not the only one who thinks this is exciting. This proof of concept was a throwaway effort and I didn’t have time to keep working on it at my job. I took a vacation, and finished off the prototype there.
Quick disclaimer: again, I’m not saying you “need to” work nights or vacations. I’m not glorifying hustle, and there are plenty of people with great careers who did none of that. In fact, if I were better at time management, I could probably find a way to squeeze those non-interrupted hours in my regular day, or to learn to make progress with interruptions. I am sharing this because I’m telling my story, and it would be a lie to pretend I did everything in a 40 hour week.
2015